// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request-reply.proto

package org.apache.flink.statefun.flink.core.polyglot.generated;

/**
 * <pre>
 * The following section contains all the message types that are sent 
 * from Flink to a remote function.
 * </pre>
 *
 * Protobuf type {@code org.apache.flink.statefun.flink.core.polyglot.ToFunction}
 */
public  final class ToFunction extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.flink.core.polyglot.ToFunction)
    ToFunctionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ToFunction.newBuilder() to construct.
  private ToFunction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ToFunction() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ToFunction(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 802: {
            org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.Builder subBuilder = null;
            if (requestCase_ == 100) {
              subBuilder = ((org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_).toBuilder();
            }
            request_ =
                input.readMessage(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 100;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.class, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Builder.class);
  }

  public interface PersistedValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The unique name of the persisted state.
     * </pre>
     *
     * <code>string state_name = 1;</code>
     */
    java.lang.String getStateName();
    /**
     * <pre>
     * The unique name of the persisted state.
     * </pre>
     *
     * <code>string state_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getStateNameBytes();

    /**
     * <pre>
     * The serialized state value
     * </pre>
     *
     * <code>bytes state_value = 2;</code>
     */
    com.google.protobuf.ByteString getStateValue();
  }
  /**
   * <pre>
   * PersistedValue represents a PersistedValue's value that is managed by Flink on behalf of a remote function. 
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue}
   */
  public  static final class PersistedValue extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue)
      PersistedValueOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PersistedValue.newBuilder() to construct.
    private PersistedValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PersistedValue() {
      stateName_ = "";
      stateValue_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PersistedValue(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              stateName_ = s;
              break;
            }
            case 18: {

              stateValue_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_PersistedValue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_PersistedValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.class, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder.class);
    }

    public static final int STATE_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object stateName_;
    /**
     * <pre>
     * The unique name of the persisted state.
     * </pre>
     *
     * <code>string state_name = 1;</code>
     */
    public java.lang.String getStateName() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stateName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The unique name of the persisted state.
     * </pre>
     *
     * <code>string state_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getStateNameBytes() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stateName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATE_VALUE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString stateValue_;
    /**
     * <pre>
     * The serialized state value
     * </pre>
     *
     * <code>bytes state_value = 2;</code>
     */
    public com.google.protobuf.ByteString getStateValue() {
      return stateValue_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getStateNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stateName_);
      }
      if (!stateValue_.isEmpty()) {
        output.writeBytes(2, stateValue_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getStateNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stateName_);
      }
      if (!stateValue_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, stateValue_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue other = (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue) obj;

      if (!getStateName()
          .equals(other.getStateName())) return false;
      if (!getStateValue()
          .equals(other.getStateValue())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getStateName().hashCode();
      hash = (37 * hash) + STATE_VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getStateValue().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * PersistedValue represents a PersistedValue's value that is managed by Flink on behalf of a remote function. 
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue)
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_PersistedValue_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_PersistedValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.class, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder.class);
      }

      // Construct using org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        stateName_ = "";

        stateValue_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_PersistedValue_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue getDefaultInstanceForType() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue build() {
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue buildPartial() {
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue result = new org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue(this);
        result.stateName_ = stateName_;
        result.stateValue_ = stateValue_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue) {
          return mergeFrom((org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue other) {
        if (other == org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.getDefaultInstance()) return this;
        if (!other.getStateName().isEmpty()) {
          stateName_ = other.stateName_;
          onChanged();
        }
        if (other.getStateValue() != com.google.protobuf.ByteString.EMPTY) {
          setStateValue(other.getStateValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object stateName_ = "";
      /**
       * <pre>
       * The unique name of the persisted state.
       * </pre>
       *
       * <code>string state_name = 1;</code>
       */
      public java.lang.String getStateName() {
        java.lang.Object ref = stateName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stateName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The unique name of the persisted state.
       * </pre>
       *
       * <code>string state_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStateNameBytes() {
        java.lang.Object ref = stateName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stateName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The unique name of the persisted state.
       * </pre>
       *
       * <code>string state_name = 1;</code>
       */
      public Builder setStateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stateName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique name of the persisted state.
       * </pre>
       *
       * <code>string state_name = 1;</code>
       */
      public Builder clearStateName() {
        
        stateName_ = getDefaultInstance().getStateName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique name of the persisted state.
       * </pre>
       *
       * <code>string state_name = 1;</code>
       */
      public Builder setStateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stateName_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString stateValue_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The serialized state value
       * </pre>
       *
       * <code>bytes state_value = 2;</code>
       */
      public com.google.protobuf.ByteString getStateValue() {
        return stateValue_;
      }
      /**
       * <pre>
       * The serialized state value
       * </pre>
       *
       * <code>bytes state_value = 2;</code>
       */
      public Builder setStateValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stateValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The serialized state value
       * </pre>
       *
       * <code>bytes state_value = 2;</code>
       */
      public Builder clearStateValue() {
        
        stateValue_ = getDefaultInstance().getStateValue();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue)
    private static final org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue();
    }

    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PersistedValue>
        PARSER = new com.google.protobuf.AbstractParser<PersistedValue>() {
      @java.lang.Override
      public PersistedValue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PersistedValue(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PersistedValue> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PersistedValue> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InvocationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The address of the function that requested the invocation (possibly absent)
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
     */
    boolean hasCaller();
    /**
     * <pre>
     * The address of the function that requested the invocation (possibly absent)
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
     */
    org.apache.flink.statefun.flink.core.polyglot.generated.Address getCaller();
    /**
     * <pre>
     * The address of the function that requested the invocation (possibly absent)
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
     */
    org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder getCallerOrBuilder();

    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.google.protobuf.Any argument = 2;</code>
     */
    boolean hasArgument();
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.google.protobuf.Any argument = 2;</code>
     */
    com.google.protobuf.Any getArgument();
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.google.protobuf.Any argument = 2;</code>
     */
    com.google.protobuf.AnyOrBuilder getArgumentOrBuilder();
  }
  /**
   * <pre>
   * Invocation represents a remote function call, it associated with an (optional) return address,
   * and an argument. 
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation}
   */
  public  static final class Invocation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation)
      InvocationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Invocation.newBuilder() to construct.
    private Invocation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Invocation() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Invocation(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder subBuilder = null;
              if (caller_ != null) {
                subBuilder = caller_.toBuilder();
              }
              caller_ = input.readMessage(org.apache.flink.statefun.flink.core.polyglot.generated.Address.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(caller_);
                caller_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.Any.Builder subBuilder = null;
              if (argument_ != null) {
                subBuilder = argument_.toBuilder();
              }
              argument_ = input.readMessage(com.google.protobuf.Any.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(argument_);
                argument_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_Invocation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_Invocation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.class, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder.class);
    }

    public static final int CALLER_FIELD_NUMBER = 1;
    private org.apache.flink.statefun.flink.core.polyglot.generated.Address caller_;
    /**
     * <pre>
     * The address of the function that requested the invocation (possibly absent)
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
     */
    public boolean hasCaller() {
      return caller_ != null;
    }
    /**
     * <pre>
     * The address of the function that requested the invocation (possibly absent)
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.Address getCaller() {
      return caller_ == null ? org.apache.flink.statefun.flink.core.polyglot.generated.Address.getDefaultInstance() : caller_;
    }
    /**
     * <pre>
     * The address of the function that requested the invocation (possibly absent)
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder getCallerOrBuilder() {
      return getCaller();
    }

    public static final int ARGUMENT_FIELD_NUMBER = 2;
    private com.google.protobuf.Any argument_;
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.google.protobuf.Any argument = 2;</code>
     */
    public boolean hasArgument() {
      return argument_ != null;
    }
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.google.protobuf.Any argument = 2;</code>
     */
    public com.google.protobuf.Any getArgument() {
      return argument_ == null ? com.google.protobuf.Any.getDefaultInstance() : argument_;
    }
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.google.protobuf.Any argument = 2;</code>
     */
    public com.google.protobuf.AnyOrBuilder getArgumentOrBuilder() {
      return getArgument();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (caller_ != null) {
        output.writeMessage(1, getCaller());
      }
      if (argument_ != null) {
        output.writeMessage(2, getArgument());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (caller_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCaller());
      }
      if (argument_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getArgument());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation other = (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation) obj;

      if (hasCaller() != other.hasCaller()) return false;
      if (hasCaller()) {
        if (!getCaller()
            .equals(other.getCaller())) return false;
      }
      if (hasArgument() != other.hasArgument()) return false;
      if (hasArgument()) {
        if (!getArgument()
            .equals(other.getArgument())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCaller()) {
        hash = (37 * hash) + CALLER_FIELD_NUMBER;
        hash = (53 * hash) + getCaller().hashCode();
      }
      if (hasArgument()) {
        hash = (37 * hash) + ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getArgument().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Invocation represents a remote function call, it associated with an (optional) return address,
     * and an argument. 
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation)
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_Invocation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_Invocation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.class, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder.class);
      }

      // Construct using org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (callerBuilder_ == null) {
          caller_ = null;
        } else {
          caller_ = null;
          callerBuilder_ = null;
        }
        if (argumentBuilder_ == null) {
          argument_ = null;
        } else {
          argument_ = null;
          argumentBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_Invocation_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation getDefaultInstanceForType() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation build() {
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation buildPartial() {
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation result = new org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation(this);
        if (callerBuilder_ == null) {
          result.caller_ = caller_;
        } else {
          result.caller_ = callerBuilder_.build();
        }
        if (argumentBuilder_ == null) {
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation) {
          return mergeFrom((org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation other) {
        if (other == org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.getDefaultInstance()) return this;
        if (other.hasCaller()) {
          mergeCaller(other.getCaller());
        }
        if (other.hasArgument()) {
          mergeArgument(other.getArgument());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private org.apache.flink.statefun.flink.core.polyglot.generated.Address caller_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.flink.core.polyglot.generated.Address, org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder> callerBuilder_;
      /**
       * <pre>
       * The address of the function that requested the invocation (possibly absent)
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
       */
      public boolean hasCaller() {
        return callerBuilder_ != null || caller_ != null;
      }
      /**
       * <pre>
       * The address of the function that requested the invocation (possibly absent)
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.Address getCaller() {
        if (callerBuilder_ == null) {
          return caller_ == null ? org.apache.flink.statefun.flink.core.polyglot.generated.Address.getDefaultInstance() : caller_;
        } else {
          return callerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The address of the function that requested the invocation (possibly absent)
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
       */
      public Builder setCaller(org.apache.flink.statefun.flink.core.polyglot.generated.Address value) {
        if (callerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          caller_ = value;
          onChanged();
        } else {
          callerBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The address of the function that requested the invocation (possibly absent)
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
       */
      public Builder setCaller(
          org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder builderForValue) {
        if (callerBuilder_ == null) {
          caller_ = builderForValue.build();
          onChanged();
        } else {
          callerBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The address of the function that requested the invocation (possibly absent)
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
       */
      public Builder mergeCaller(org.apache.flink.statefun.flink.core.polyglot.generated.Address value) {
        if (callerBuilder_ == null) {
          if (caller_ != null) {
            caller_ =
              org.apache.flink.statefun.flink.core.polyglot.generated.Address.newBuilder(caller_).mergeFrom(value).buildPartial();
          } else {
            caller_ = value;
          }
          onChanged();
        } else {
          callerBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The address of the function that requested the invocation (possibly absent)
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
       */
      public Builder clearCaller() {
        if (callerBuilder_ == null) {
          caller_ = null;
          onChanged();
        } else {
          caller_ = null;
          callerBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The address of the function that requested the invocation (possibly absent)
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder getCallerBuilder() {
        
        onChanged();
        return getCallerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The address of the function that requested the invocation (possibly absent)
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder getCallerOrBuilder() {
        if (callerBuilder_ != null) {
          return callerBuilder_.getMessageOrBuilder();
        } else {
          return caller_ == null ?
              org.apache.flink.statefun.flink.core.polyglot.generated.Address.getDefaultInstance() : caller_;
        }
      }
      /**
       * <pre>
       * The address of the function that requested the invocation (possibly absent)
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address caller = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.flink.core.polyglot.generated.Address, org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder> 
          getCallerFieldBuilder() {
        if (callerBuilder_ == null) {
          callerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.flink.core.polyglot.generated.Address, org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder>(
                  getCaller(),
                  getParentForChildren(),
                  isClean());
          caller_ = null;
        }
        return callerBuilder_;
      }

      private com.google.protobuf.Any argument_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> argumentBuilder_;
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.google.protobuf.Any argument = 2;</code>
       */
      public boolean hasArgument() {
        return argumentBuilder_ != null || argument_ != null;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.google.protobuf.Any argument = 2;</code>
       */
      public com.google.protobuf.Any getArgument() {
        if (argumentBuilder_ == null) {
          return argument_ == null ? com.google.protobuf.Any.getDefaultInstance() : argument_;
        } else {
          return argumentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.google.protobuf.Any argument = 2;</code>
       */
      public Builder setArgument(com.google.protobuf.Any value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          argument_ = value;
          onChanged();
        } else {
          argumentBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.google.protobuf.Any argument = 2;</code>
       */
      public Builder setArgument(
          com.google.protobuf.Any.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          argument_ = builderForValue.build();
          onChanged();
        } else {
          argumentBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.google.protobuf.Any argument = 2;</code>
       */
      public Builder mergeArgument(com.google.protobuf.Any value) {
        if (argumentBuilder_ == null) {
          if (argument_ != null) {
            argument_ =
              com.google.protobuf.Any.newBuilder(argument_).mergeFrom(value).buildPartial();
          } else {
            argument_ = value;
          }
          onChanged();
        } else {
          argumentBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.google.protobuf.Any argument = 2;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = null;
          onChanged();
        } else {
          argument_ = null;
          argumentBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.google.protobuf.Any argument = 2;</code>
       */
      public com.google.protobuf.Any.Builder getArgumentBuilder() {
        
        onChanged();
        return getArgumentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.google.protobuf.Any argument = 2;</code>
       */
      public com.google.protobuf.AnyOrBuilder getArgumentOrBuilder() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilder();
        } else {
          return argument_ == null ?
              com.google.protobuf.Any.getDefaultInstance() : argument_;
        }
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.google.protobuf.Any argument = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                  getArgument(),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation)
    private static final org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation();
    }

    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Invocation>
        PARSER = new com.google.protobuf.AbstractParser<Invocation>() {
      @java.lang.Override
      public Invocation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Invocation(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Invocation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Invocation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InvocationBatchRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The address of the function to invoke
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
     */
    boolean hasTarget();
    /**
     * <pre>
     * The address of the function to invoke
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
     */
    org.apache.flink.statefun.flink.core.polyglot.generated.Address getTarget();
    /**
     * <pre>
     * The address of the function to invoke
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
     */
    org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder getTargetOrBuilder();

    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue> 
        getStateList();
    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue getState(int index);
    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    int getStateCount();
    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    java.util.List<? extends org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder> 
        getStateOrBuilderList();
    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder getStateOrBuilder(
        int index);

    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation> 
        getInvocationsList();
    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation getInvocations(int index);
    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    int getInvocationsCount();
    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    java.util.List<? extends org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder> 
        getInvocationsOrBuilderList();
    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder getInvocationsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * InvocationBatchRequest represents a request to invoke a remote function. It is always associated with a target
   * address (the function to invoke), and a list of values for registered state.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest}
   */
  public  static final class InvocationBatchRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest)
      InvocationBatchRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InvocationBatchRequest.newBuilder() to construct.
    private InvocationBatchRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InvocationBatchRequest() {
      state_ = java.util.Collections.emptyList();
      invocations_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InvocationBatchRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(org.apache.flink.statefun.flink.core.polyglot.generated.Address.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                state_ = new java.util.ArrayList<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue>();
                mutable_bitField0_ |= 0x00000002;
              }
              state_.add(
                  input.readMessage(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                invocations_ = new java.util.ArrayList<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation>();
                mutable_bitField0_ |= 0x00000004;
              }
              invocations_.add(
                  input.readMessage(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          state_ = java.util.Collections.unmodifiableList(state_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          invocations_ = java.util.Collections.unmodifiableList(invocations_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_InvocationBatchRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_InvocationBatchRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.class, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.Builder.class);
    }

    private int bitField0_;
    public static final int TARGET_FIELD_NUMBER = 1;
    private org.apache.flink.statefun.flink.core.polyglot.generated.Address target_;
    /**
     * <pre>
     * The address of the function to invoke
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
     */
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * The address of the function to invoke
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.Address getTarget() {
      return target_ == null ? org.apache.flink.statefun.flink.core.polyglot.generated.Address.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * The address of the function to invoke
     * </pre>
     *
     * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    public static final int STATE_FIELD_NUMBER = 2;
    private java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue> state_;
    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    public java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue> getStateList() {
      return state_;
    }
    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    public java.util.List<? extends org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder> 
        getStateOrBuilderList() {
      return state_;
    }
    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    public int getStateCount() {
      return state_.size();
    }
    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue getState(int index) {
      return state_.get(index);
    }
    /**
     * <pre>
     * A list of PersistedValues that were registered as a persisted state.
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder getStateOrBuilder(
        int index) {
      return state_.get(index);
    }

    public static final int INVOCATIONS_FIELD_NUMBER = 3;
    private java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation> invocations_;
    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    public java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation> getInvocationsList() {
      return invocations_;
    }
    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    public java.util.List<? extends org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder> 
        getInvocationsOrBuilderList() {
      return invocations_;
    }
    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    public int getInvocationsCount() {
      return invocations_.size();
    }
    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation getInvocations(int index) {
      return invocations_.get(index);
    }
    /**
     * <pre>
     * A non empty (at least one) list of invocations
     * </pre>
     *
     * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder getInvocationsOrBuilder(
        int index) {
      return invocations_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != null) {
        output.writeMessage(1, getTarget());
      }
      for (int i = 0; i < state_.size(); i++) {
        output.writeMessage(2, state_.get(i));
      }
      for (int i = 0; i < invocations_.size(); i++) {
        output.writeMessage(3, invocations_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTarget());
      }
      for (int i = 0; i < state_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, state_.get(i));
      }
      for (int i = 0; i < invocations_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, invocations_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest other = (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) obj;

      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (!getStateList()
          .equals(other.getStateList())) return false;
      if (!getInvocationsList()
          .equals(other.getInvocationsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      if (getStateCount() > 0) {
        hash = (37 * hash) + STATE_FIELD_NUMBER;
        hash = (53 * hash) + getStateList().hashCode();
      }
      if (getInvocationsCount() > 0) {
        hash = (37 * hash) + INVOCATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getInvocationsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * InvocationBatchRequest represents a request to invoke a remote function. It is always associated with a target
     * address (the function to invoke), and a list of values for registered state.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest)
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_InvocationBatchRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_InvocationBatchRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.class, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.Builder.class);
      }

      // Construct using org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStateFieldBuilder();
          getInvocationsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        if (stateBuilder_ == null) {
          state_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          stateBuilder_.clear();
        }
        if (invocationsBuilder_ == null) {
          invocations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          invocationsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_InvocationBatchRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest getDefaultInstanceForType() {
        return org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest build() {
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest buildPartial() {
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest result = new org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        if (stateBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            state_ = java.util.Collections.unmodifiableList(state_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.state_ = state_;
        } else {
          result.state_ = stateBuilder_.build();
        }
        if (invocationsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            invocations_ = java.util.Collections.unmodifiableList(invocations_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.invocations_ = invocations_;
        } else {
          result.invocations_ = invocationsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) {
          return mergeFrom((org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest other) {
        if (other == org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.getDefaultInstance()) return this;
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        if (stateBuilder_ == null) {
          if (!other.state_.isEmpty()) {
            if (state_.isEmpty()) {
              state_ = other.state_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureStateIsMutable();
              state_.addAll(other.state_);
            }
            onChanged();
          }
        } else {
          if (!other.state_.isEmpty()) {
            if (stateBuilder_.isEmpty()) {
              stateBuilder_.dispose();
              stateBuilder_ = null;
              state_ = other.state_;
              bitField0_ = (bitField0_ & ~0x00000002);
              stateBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getStateFieldBuilder() : null;
            } else {
              stateBuilder_.addAllMessages(other.state_);
            }
          }
        }
        if (invocationsBuilder_ == null) {
          if (!other.invocations_.isEmpty()) {
            if (invocations_.isEmpty()) {
              invocations_ = other.invocations_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureInvocationsIsMutable();
              invocations_.addAll(other.invocations_);
            }
            onChanged();
          }
        } else {
          if (!other.invocations_.isEmpty()) {
            if (invocationsBuilder_.isEmpty()) {
              invocationsBuilder_.dispose();
              invocationsBuilder_ = null;
              invocations_ = other.invocations_;
              bitField0_ = (bitField0_ & ~0x00000004);
              invocationsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInvocationsFieldBuilder() : null;
            } else {
              invocationsBuilder_.addAllMessages(other.invocations_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.apache.flink.statefun.flink.core.polyglot.generated.Address target_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.flink.core.polyglot.generated.Address, org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder> targetBuilder_;
      /**
       * <pre>
       * The address of the function to invoke
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * The address of the function to invoke
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.Address getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? org.apache.flink.statefun.flink.core.polyglot.generated.Address.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The address of the function to invoke
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
       */
      public Builder setTarget(org.apache.flink.statefun.flink.core.polyglot.generated.Address value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The address of the function to invoke
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
       */
      public Builder setTarget(
          org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The address of the function to invoke
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
       */
      public Builder mergeTarget(org.apache.flink.statefun.flink.core.polyglot.generated.Address value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              org.apache.flink.statefun.flink.core.polyglot.generated.Address.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The address of the function to invoke
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The address of the function to invoke
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The address of the function to invoke
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              org.apache.flink.statefun.flink.core.polyglot.generated.Address.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * The address of the function to invoke
       * </pre>
       *
       * <code>.org.apache.flink.statefun.flink.core.polyglot.Address target = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.flink.core.polyglot.generated.Address, org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.flink.core.polyglot.generated.Address, org.apache.flink.statefun.flink.core.polyglot.generated.Address.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.AddressOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }

      private java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue> state_ =
        java.util.Collections.emptyList();
      private void ensureStateIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          state_ = new java.util.ArrayList<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue>(state_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder> stateBuilder_;

      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue> getStateList() {
        if (stateBuilder_ == null) {
          return java.util.Collections.unmodifiableList(state_);
        } else {
          return stateBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public int getStateCount() {
        if (stateBuilder_ == null) {
          return state_.size();
        } else {
          return stateBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue getState(int index) {
        if (stateBuilder_ == null) {
          return state_.get(index);
        } else {
          return stateBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public Builder setState(
          int index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue value) {
        if (stateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStateIsMutable();
          state_.set(index, value);
          onChanged();
        } else {
          stateBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public Builder setState(
          int index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder builderForValue) {
        if (stateBuilder_ == null) {
          ensureStateIsMutable();
          state_.set(index, builderForValue.build());
          onChanged();
        } else {
          stateBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public Builder addState(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue value) {
        if (stateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStateIsMutable();
          state_.add(value);
          onChanged();
        } else {
          stateBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public Builder addState(
          int index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue value) {
        if (stateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStateIsMutable();
          state_.add(index, value);
          onChanged();
        } else {
          stateBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public Builder addState(
          org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder builderForValue) {
        if (stateBuilder_ == null) {
          ensureStateIsMutable();
          state_.add(builderForValue.build());
          onChanged();
        } else {
          stateBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public Builder addState(
          int index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder builderForValue) {
        if (stateBuilder_ == null) {
          ensureStateIsMutable();
          state_.add(index, builderForValue.build());
          onChanged();
        } else {
          stateBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public Builder addAllState(
          java.lang.Iterable<? extends org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue> values) {
        if (stateBuilder_ == null) {
          ensureStateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, state_);
          onChanged();
        } else {
          stateBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public Builder clearState() {
        if (stateBuilder_ == null) {
          state_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          stateBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public Builder removeState(int index) {
        if (stateBuilder_ == null) {
          ensureStateIsMutable();
          state_.remove(index);
          onChanged();
        } else {
          stateBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder getStateBuilder(
          int index) {
        return getStateFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder getStateOrBuilder(
          int index) {
        if (stateBuilder_ == null) {
          return state_.get(index);  } else {
          return stateBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public java.util.List<? extends org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder> 
           getStateOrBuilderList() {
        if (stateBuilder_ != null) {
          return stateBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(state_);
        }
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder addStateBuilder() {
        return getStateFieldBuilder().addBuilder(
            org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder addStateBuilder(
          int index) {
        return getStateFieldBuilder().addBuilder(
            index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of PersistedValues that were registered as a persisted state.
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.PersistedValue state = 2;</code>
       */
      public java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder> 
           getStateBuilderList() {
        return getStateFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder> 
          getStateFieldBuilder() {
        if (stateBuilder_ == null) {
          stateBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValue.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.PersistedValueOrBuilder>(
                  state_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          state_ = null;
        }
        return stateBuilder_;
      }

      private java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation> invocations_ =
        java.util.Collections.emptyList();
      private void ensureInvocationsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          invocations_ = new java.util.ArrayList<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation>(invocations_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder> invocationsBuilder_;

      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation> getInvocationsList() {
        if (invocationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(invocations_);
        } else {
          return invocationsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public int getInvocationsCount() {
        if (invocationsBuilder_ == null) {
          return invocations_.size();
        } else {
          return invocationsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation getInvocations(int index) {
        if (invocationsBuilder_ == null) {
          return invocations_.get(index);
        } else {
          return invocationsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public Builder setInvocations(
          int index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation value) {
        if (invocationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInvocationsIsMutable();
          invocations_.set(index, value);
          onChanged();
        } else {
          invocationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public Builder setInvocations(
          int index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder builderForValue) {
        if (invocationsBuilder_ == null) {
          ensureInvocationsIsMutable();
          invocations_.set(index, builderForValue.build());
          onChanged();
        } else {
          invocationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public Builder addInvocations(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation value) {
        if (invocationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInvocationsIsMutable();
          invocations_.add(value);
          onChanged();
        } else {
          invocationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public Builder addInvocations(
          int index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation value) {
        if (invocationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInvocationsIsMutable();
          invocations_.add(index, value);
          onChanged();
        } else {
          invocationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public Builder addInvocations(
          org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder builderForValue) {
        if (invocationsBuilder_ == null) {
          ensureInvocationsIsMutable();
          invocations_.add(builderForValue.build());
          onChanged();
        } else {
          invocationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public Builder addInvocations(
          int index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder builderForValue) {
        if (invocationsBuilder_ == null) {
          ensureInvocationsIsMutable();
          invocations_.add(index, builderForValue.build());
          onChanged();
        } else {
          invocationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public Builder addAllInvocations(
          java.lang.Iterable<? extends org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation> values) {
        if (invocationsBuilder_ == null) {
          ensureInvocationsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, invocations_);
          onChanged();
        } else {
          invocationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public Builder clearInvocations() {
        if (invocationsBuilder_ == null) {
          invocations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          invocationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public Builder removeInvocations(int index) {
        if (invocationsBuilder_ == null) {
          ensureInvocationsIsMutable();
          invocations_.remove(index);
          onChanged();
        } else {
          invocationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder getInvocationsBuilder(
          int index) {
        return getInvocationsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder getInvocationsOrBuilder(
          int index) {
        if (invocationsBuilder_ == null) {
          return invocations_.get(index);  } else {
          return invocationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public java.util.List<? extends org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder> 
           getInvocationsOrBuilderList() {
        if (invocationsBuilder_ != null) {
          return invocationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(invocations_);
        }
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder addInvocationsBuilder() {
        return getInvocationsFieldBuilder().addBuilder(
            org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.getDefaultInstance());
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder addInvocationsBuilder(
          int index) {
        return getInvocationsFieldBuilder().addBuilder(
            index, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.getDefaultInstance());
      }
      /**
       * <pre>
       * A non empty (at least one) list of invocations
       * </pre>
       *
       * <code>repeated .org.apache.flink.statefun.flink.core.polyglot.ToFunction.Invocation invocations = 3;</code>
       */
      public java.util.List<org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder> 
           getInvocationsBuilderList() {
        return getInvocationsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder> 
          getInvocationsFieldBuilder() {
        if (invocationsBuilder_ == null) {
          invocationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Invocation.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationOrBuilder>(
                  invocations_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          invocations_ = null;
        }
        return invocationsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest)
    private static final org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest();
    }

    public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InvocationBatchRequest>
        PARSER = new com.google.protobuf.AbstractParser<InvocationBatchRequest>() {
      @java.lang.Override
      public InvocationBatchRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InvocationBatchRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InvocationBatchRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InvocationBatchRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int requestCase_ = 0;
  private java.lang.Object request_;
  public enum RequestCase
      implements com.google.protobuf.Internal.EnumLite {
    INVOCATION(100),
    REQUEST_NOT_SET(0);
    private final int value;
    private RequestCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RequestCase valueOf(int value) {
      return forNumber(value);
    }

    public static RequestCase forNumber(int value) {
      switch (value) {
        case 100: return INVOCATION;
        case 0: return REQUEST_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public RequestCase
  getRequestCase() {
    return RequestCase.forNumber(
        requestCase_);
  }

  public static final int INVOCATION_FIELD_NUMBER = 100;
  /**
   * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
   */
  public boolean hasInvocation() {
    return requestCase_ == 100;
  }
  /**
   * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
   */
  public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest getInvocation() {
    if (requestCase_ == 100) {
       return (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_;
    }
    return org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
   */
  public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequestOrBuilder getInvocationOrBuilder() {
    if (requestCase_ == 100) {
       return (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_;
    }
    return org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (requestCase_ == 100) {
      output.writeMessage(100, (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (requestCase_ == 100) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(100, (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction)) {
      return super.equals(obj);
    }
    org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction other = (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction) obj;

    if (!getRequestCase().equals(other.getRequestCase())) return false;
    switch (requestCase_) {
      case 100:
        if (!getInvocation()
            .equals(other.getInvocation())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (requestCase_) {
      case 100:
        hash = (37 * hash) + INVOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getInvocation().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The following section contains all the message types that are sent 
   * from Flink to a remote function.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.statefun.flink.core.polyglot.ToFunction}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.flink.core.polyglot.ToFunction)
      org.apache.flink.statefun.flink.core.polyglot.generated.ToFunctionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.class, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.Builder.class);
    }

    // Construct using org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      requestCase_ = 0;
      request_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.RequestReply.internal_static_org_apache_flink_statefun_flink_core_polyglot_ToFunction_descriptor;
    }

    @java.lang.Override
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction getDefaultInstanceForType() {
      return org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction build() {
      org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction buildPartial() {
      org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction result = new org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction(this);
      if (requestCase_ == 100) {
        if (invocationBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = invocationBuilder_.build();
        }
      }
      result.requestCase_ = requestCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction) {
        return mergeFrom((org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction other) {
      if (other == org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.getDefaultInstance()) return this;
      switch (other.getRequestCase()) {
        case INVOCATION: {
          mergeInvocation(other.getInvocation());
          break;
        }
        case REQUEST_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int requestCase_ = 0;
    private java.lang.Object request_;
    public RequestCase
        getRequestCase() {
      return RequestCase.forNumber(
          requestCase_);
    }

    public Builder clearRequest() {
      requestCase_ = 0;
      request_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequestOrBuilder> invocationBuilder_;
    /**
     * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
     */
    public boolean hasInvocation() {
      return requestCase_ == 100;
    }
    /**
     * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest getInvocation() {
      if (invocationBuilder_ == null) {
        if (requestCase_ == 100) {
          return (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_;
        }
        return org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.getDefaultInstance();
      } else {
        if (requestCase_ == 100) {
          return invocationBuilder_.getMessage();
        }
        return org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
     */
    public Builder setInvocation(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest value) {
      if (invocationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        invocationBuilder_.setMessage(value);
      }
      requestCase_ = 100;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
     */
    public Builder setInvocation(
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.Builder builderForValue) {
      if (invocationBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        invocationBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 100;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
     */
    public Builder mergeInvocation(org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest value) {
      if (invocationBuilder_ == null) {
        if (requestCase_ == 100 &&
            request_ != org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.getDefaultInstance()) {
          request_ = org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.newBuilder((org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 100) {
          invocationBuilder_.mergeFrom(value);
        }
        invocationBuilder_.setMessage(value);
      }
      requestCase_ = 100;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
     */
    public Builder clearInvocation() {
      if (invocationBuilder_ == null) {
        if (requestCase_ == 100) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 100) {
          requestCase_ = 0;
          request_ = null;
        }
        invocationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.Builder getInvocationBuilder() {
      return getInvocationFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
     */
    public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequestOrBuilder getInvocationOrBuilder() {
      if ((requestCase_ == 100) && (invocationBuilder_ != null)) {
        return invocationBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 100) {
          return (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_;
        }
        return org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.flink.core.polyglot.ToFunction.InvocationBatchRequest invocation = 100;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequestOrBuilder> 
        getInvocationFieldBuilder() {
      if (invocationBuilder_ == null) {
        if (!(requestCase_ == 100)) {
          request_ = org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.getDefaultInstance();
        }
        invocationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest.Builder, org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequestOrBuilder>(
                (org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction.InvocationBatchRequest) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 100;
      onChanged();;
      return invocationBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.flink.core.polyglot.ToFunction)
  }

  // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.flink.core.polyglot.ToFunction)
  private static final org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction();
  }

  public static org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ToFunction>
      PARSER = new com.google.protobuf.AbstractParser<ToFunction>() {
    @java.lang.Override
    public ToFunction parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ToFunction(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ToFunction> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ToFunction> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.flink.statefun.flink.core.polyglot.generated.ToFunction getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

